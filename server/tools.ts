import fs from "node:fs";
import path from "node:path";
import { Buffer } from "node:buffer";
import { gemini, GEMINI_MODEL } from "@llamaindex/google";
import {
  GoogleGenAI,
  Modality,
  GenerateContentResponse,
  Type,
  createUserContent,
  createPartFromUri,
} from "@google/genai";
import { tool, Settings, JSONValue } from "llamaindex";
import { z } from "zod";
import { TEMP_IMAGES_DIR } from "./server";
import { map, string } from "zod/v4";

Settings.llm = gemini({
  model: GEMINI_MODEL.GEMINI_2_0_FLASH,
  apiKey: process.env.GOOGLE_API_KEY,
});

const filename = `generated_image.png`;

//tool to generate image with Stable Image Core api
export async function generateImage(input: {
  prompt: string;
}): Promise<{ success: boolean; imageUrl: string; generatedAt: string }> {
  //initiating the AI client
  const ai = new GoogleGenAI({ apiKey: process.env.GOOGLE_API_KEY });
  //user prompt
  const contents = input.prompt;

  //getting response from the AI
  const response = await ai.models.generateContent({
    model: "gemini-2.0-flash-preview-image-generation",
    contents: contents,
    config: {
      responseModalities: [Modality.TEXT, Modality.IMAGE],
    },
  });

  const filepath = path.join(TEMP_IMAGES_DIR, filename);

  try {
    //getting image data as base64 encoded string
    if (response.candidates?.[0]?.content?.parts) {
      for (const part of response.candidates[0].content.parts) {
        // Based on the part type, either show the text or return the image
        if (part.text) {
          console.log("text response from LLm : " + part.text);
        } else if (part.inlineData?.data) {
          console.log("image response from LLM");
          const buffer = Buffer.from(part.inlineData.data, "base64");
          try {
            fs.writeFileSync(filepath, buffer);
            console.log("File written successfully");
          } catch (error) {
            console.error("Error writing file:", error);
          }
        }
      }
      return {
        success: true,
        imageUrl: `/api/images/${filename}`,
        generatedAt: new Date().toISOString(),
      };
    } else {
      console.log("content generated by AI is undefined or malformed");
      return {
        success: false,
        imageUrl: ``,
        generatedAt: new Date().toISOString(),
      };
    }
  } catch (error) {
    console.error("Image Generation failed. Reason : " + error);
    return {
      success: false,
      imageUrl: ``,
      generatedAt: new Date().toISOString(),
    };
  }
}

export const imgGenTool = tool({
  name: "imageGenerationTool",
  description:
    "This function is for creating images.Use this function to generate an image based on text prompt.Use this when the user requests image creation, visualization, or artistic content.",
  parameters: z.object({
    prompt: z
      .string()
      .min(10, "Prompt should be at least 10 characters")
      .describe(
        "Detailed text description of the image to generate.The description is specific about style, composition, colors, and subject matter"
      ),
  }),
  execute: generateImage,
});

type EvaluationResult = {
  faithfulness: number;
  quality: string;
  prompt_agnostic_description: string;
};

//tool to evaluate the generated image with Gemini api
export async function evalGeneratedImage(promptObject: {
  prompt: string;
}): Promise<EvaluationResult> {
  const ai = new GoogleGenAI({ apiKey: process.env.GOOGLE_API_KEY });
  let myfile;

  try {
    myfile = await ai.files.upload({
      file: path.join(TEMP_IMAGES_DIR, filename),
      config: { mimeType: "image/png" },
    });

    let response: GenerateContentResponse;
    if (myfile.uri && myfile.mimeType) {
      //AI response
      response = await ai.models.generateContent({
        model: "gemini-2.0-flash",
        contents: createUserContent([
          createPartFromUri(myfile.uri, myfile.mimeType),
          `Could you (1) evaluate the faithfulness of the attached image to this prompt: "${promptObject.prompt}", (2) evaluate the quality of the image and (3) produce a description of the image that is agnostic of the prompt that was used to generate it?`,
        ]),
        config: {
          responseMimeType: "application/json",
          responseSchema: {
            type: Type.OBJECT,
            properties: {
              faithfulness: {
                type: Type.NUMBER,
              },
              quality: {
                type: Type.STRING,
              },
              prompt_agnostic_description: {
                type: Type.STRING,
              },
            },
            description:
              "faithfulness is closeness of the generated image to the generation prompt, measured from 0 to 100. quality of the image is expressed as one of: 'low', 'mediocre', 'average', 'upper-intermediate', 'high', 'very high'. prompt_agnostic_description is description of the image, agnostic of the image generation prompt.",
            example: {
              faithfulness: 85,
              quality: "high",
              prompt_agnostic_description:
                "A vibrant digital artwork depicting a serene mountain landscape at sunset. The image features snow-capped peaks in the background with warm orange and pink hues reflecting off the mountain faces. In the foreground, there's a calm alpine lake surrounded by evergreen trees. The composition demonstrates good use of color balance and depth, with crisp details in the rocky formations and soft atmospheric effects in the sky.",
            },
            propertyOrdering: [
              "faithfulness",
              "quality",
              "prompt_agnostic_description",
            ],
          },
        },
      });
      const result = response.text;
      console.log("result from evaluation tool : " + result);
      if (result) {
        const parsedResult = JSON.parse(result);
        return parsedResult;
      } else {
        return {
          faithfulness: 0,
          quality: "error",
          prompt_agnostic_description: "Eresult from llm is undefined",
        };
      }
    } else {
      return {
        faithfulness: 0,
        quality: "error",
        prompt_agnostic_description:
          "myfile.uri and myfile.mimeType are undefined",
      };
    }
  } catch (error) {
    console.error("Evaluation failed:", error);
    return {
      faithfulness: 0,
      quality: "error",
      prompt_agnostic_description: "Evaluation failed due to error",
    };
  } finally {
    const fileName = myfile?.name;
    if (fileName) {
      await ai.files.delete({ name: fileName });
    }
  }
}

export const imgEvalTool = tool({
  name: "imageEvaluationTool",
  description:
    "This is an image evaluation tool. Use this tool to evaluate the image",
  parameters: z.object({
    prompt: z
      .string()
      .describe("The original prompt used to generate the image"),
  }),
  execute: evalGeneratedImage,
});
